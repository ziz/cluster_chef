#!/usr/bin/env bash
mkdir -p /tmp ; chmod a+rwx /tmp

progresslog='/tmp/user_data-progress.log'
exec > $progresslog.full 2>&1
set -x


# A url directory with the scripts you'd like to stuff into the machine
REMOTE_FILE_URL_BASE="<%= bootstrap_scripts_url_base %>"
echo "`date` Very loud logging enabled to ${progresslog}.full" >> $progresslog
echo "`date` Broaden the apt universe" >> $progresslog
add-apt-repository 'deb http://archive.canonical.com/ <%= ubuntu_version %> partner'
add-apt-repository 'deb http://us.archive.ubuntu.com/ubuntu <%= ubuntu_version %> universe multiverse'
add-apt-repository 'deb http://apt.opscode.com/             <%= ubuntu_version %> main'
curl http://apt.opscode.com/packages@opscode.com.gpg.key | sudo apt-key add -

# wait for system dpkg to finish
while sudo fuser /var/lib/dpkg/lock ; do echo "`date` Waiting for apt to become free" >> $progresslog ;  sleep 5 ; done  

# Do a non interactive apt-get so the user is never prompted for input
export DEBIAN_FRONTEND=noninteractive

# Update package index and update the basic system files to newest versions
echo "`date` Apt update"  >> $progresslog 
apt-get -y update  ;
dpkg --configure -a
echo "`date` Apt upgrade, could take a while"  >> $progresslog 
apt-get -y upgrade ;
echo "`date` Apt install"  >> $progresslog 
apt-get -f install ;

echo "`date` Installing base packages"  >> $progresslog 
apt-get install -y ruby ruby1.8-dev libopenssl-ruby1.8 rubygems ri irb build-essential wget ssl-cert git-core zlib1g-dev libxml2-dev runit runit-services python2.6 python2.6-dev;
echo "`date` Unchaining rubygems from the tyrrany of ubuntu"  >> $progresslog 
gem install --no-rdoc --no-ri rubygems-update --version=1.3.7 
gem install --no-rdoc --no-ri rubygems-update --version=1.3.7 
/var/lib/gems/1.8/bin/update_rubygems
gem update --no-rdoc --no-ri --system
gem update --no-rdoc --no-ri --system
gem --version

echo "`date` Installing chef gems"  >> $progresslog 
gem install --no-rdoc --no-ri broham uuidtools configliere right_aws ;
gem install --no-rdoc --no-ri mixlib-authentication ohai --pre
gem install --no-rdoc --no-ri mixlib-authentication chef ohai --pre
gem list >> $progresslog

echo "`date` Hostname"  >> $progresslog 
# This patches the ec2-set-hostname script to use /etc/hostname (otherwise it
# crams the ec2-assigned hostname in there regardless)
cp /usr/bin/ec2-set-hostname /usr/bin/ec2-set-hostname.`date "+%Y%m%d%H"`.orig ;
wget -nv ${REMOTE_FILE_URL_BASE}/ec2-set-hostname_replacement.py -O /usr/bin/ec2-set-hostname ;
chmod a+x /usr/bin/ec2-set-hostname

# apt-get -y install chef

echo "`date` Bootstrap chef client"  >> $progresslog 
echo '{ "chef": { "server_fqdn":"<%= chef_server_fqdn %>", "url_type":"http", "init_style":"runit", "path":"/var/lib/chef", "cache_path":"/var/cache/chef", "run_path":"/var/run", "serve_path":"/var/lib/chef/srv", "log_dir":"/var/log/chef" }, "run_list": [ "recipe[chef::bootstrap_client]" ] }' > /tmp/chef_client.json ;
wget -nv ${REMOTE_FILE_URL_BASE}/chef_bootstrap.rb -O /tmp/chef_bootstrap.rb ;
# sudo stop runsvdir ;
chef-solo -c /tmp/chef_bootstrap.rb -j /tmp/chef_client.json  >> $progresslog 

echo "`date` Pulling in chef client and server scripts"  >> $progresslog 
cp /etc/chef/client.rb /etc/chef/client-orig.rb ;
wget -nv ${REMOTE_FILE_URL_BASE}/client.rb -O /etc/chef/client.rb ;
cat > /etc/chef/client-config.json <<EOF
<%= chef_config[:attributes].to_json %>
EOF
cat > /etc/chef/chef-config.json <<EOF
{ "chef_server":"http://<%= chef_server_fqdn %>:4000",
  "get_name_from":"<%= chef_config[:get_name_from] -%>" }
EOF
cat > /etc/chef/validation.pem <<EOF
<%= chef_config[:validation_key] -%>
EOF

# make sure chef is logging sanely, thank you supervise
sed -i -e '/ chef-client / s|$|  -L /var/log/chef/client.log -V|' /etc/service/chef-client/run

# now run chef client against the server itself
service chef-client restart

echo "`date` Cleanup"  >> $progresslog 
apt-get autoremove;
updatedb;

echo "`date` User data script (chef client bootstrap) complete: `date`"  >> $progresslog 
